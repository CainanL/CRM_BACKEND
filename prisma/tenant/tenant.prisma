generator tenantClient {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/tenant-client"
}

datasource tenantDb {
  provider = "postgresql"
  url      = env("TENANT_DATABASE_URL")
}



// Solução, nome da atividade. Ex: Projeto Elétrico, energia solar, desenvolvimento de software.
model Solution {
  id          String                 @id @default(uuid())
  name        String                 @unique
  description String?
  priceRanger SolutionPriceRanger[]
  documents   SolutionCapturedLead[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fieldSettings SolutionFieldSettings[]

  @@map("solutions")
}

// valor cobrado por determinado ranger. Ex: R$ 600 por KWp, R$ 120 por hora.
model SolutionPriceRanger {
  id                String   @id @default(uuid())
  title             String
  description       String?
  price             Decimal? @tenantDb.Decimal(10, 2)
  ranger            Decimal? @tenantDb.Decimal(10, 2)
  unitOfMeasurement String?

  solutionId String
  solution   Solution @relation(fields: [solutionId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("solution_price_rangers")
}

// Parâmetros para criação do input. Ex: dataType: CPF, formatType: string, mask: 999.999.999-99, title: CPF, placeholder: CPF
model SolutionFieldSettings {
  id          String  @id @default(uuid())
  dataType    String // Tipo de dado (text, email, phone, number, date, etc.)
  formatType  String // Formato específico (cpf, cnpj, phone, etc.)
  mask        String? // Máscara para formatação
  title       String // Título do campo
  placeholder String // Placeholder do input
  isRequired  Boolean @default(false) // Campo obrigatório
  order       Int     @default(0) // Ordem de exibição

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutionId String
  solution   Solution @relation(fields: [solutionId], references: [id])

  SolutionFieldValue SolutionFieldValue[]

  @@map("solution_field_settings")
}

// Valor do input. Ex: CPF, valor = 000.000.000-00
model SolutionFieldValue {
  id    String  @id @default(uuid())
  title String
  value String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documentId String
  document   SolutionCapturedLead @relation(fields: [documentId], references: [id])

  settingsId String
  settings   SolutionFieldSettings @relation(fields: [settingsId], references: [id])

  @@map("solution_field_values")
}

// Contem o agrupamento de inputs de cada solution juntando os dados de input e vinculando a informação ao lead que está sendo criado aqui.
// Cada SolutionCapturedDocument representa um lead completo
model SolutionCapturedLead {
  id String @id @default(uuid())

  // Status do lead (opcional, pode ser configurado pelo usuário)
  status String @default("NEW")

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  fielValues SolutionFieldValue[]
  solutionId String
  solution   Solution             @relation(fields: [solutionId], references: [id])

  @@map("solution_captured_leads")
}

// Endereço do funcionário
model EmployeeAddress {
  id         String  @id @default(uuid())
  street     String // Nome da rua
  number     String // Número da residência
  complement String? // Complemento (opcional)
  district   String // Bairro
  city       String // Cidade
  state      String // Estado
  cep        String // CEP

  // Relacionamento com Employee (1:1)
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employee_addresses")
}

// Endereço do cliente
model ClientAddress {
  id         String  @id @default(uuid())
  street     String // Nome da rua
  number     String // Número da residência
  complement String? // Complemento (opcional)
  district   String // Bairro
  city       String // Cidade
  state      String // Estado
  cep        String // CEP

  // Relacionamento com Client (1:1)
  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_addresses")
}

// Funcionário da empresa
model Employee {
  id        String    @id @default(uuid())
  fullName  String // Nome completo do funcionário
  photo     String? // URL da foto (opcional)
  cpf       String?   @unique // CPF único
  birthDate DateTime? // Data de nascimento
  sex       String // Sexo (MALE, FEMALE, OTHER)
  email     String    @unique // Email único
  phone     String? // Telefone (opcional)

  // Relacionamento com endereço (1:1)
  address EmployeeAddress?

  // Relacionamento com interações de clientes (1:N)
  clientInteractions ClientInteraction[]

  // Relacionamento com oportunidades atribuídas (1:N)
  assignedOpportunities Opportunity[]

  function             String? // Cargo/função
  department           String? // Departamento
  internalRegistration String   @unique // Registro interno único
  admissionDate        DateTime // Data de admissão
  typeOfContract       String? // Tipo de contrato (CLT, PJ, TEMPORARY, INTERNSHIP, TRAINEE)
  salary               Decimal? @tenantDb.Decimal(10, 2) // Salário base
  comission            Decimal? @tenantDb.Decimal(10, 2) // Comissão (opcional)
  status               String // Status (ACTIVE, INACTIVE, VACATION, ON_LEAVE, TERMINATED)
  userId               String? // Referência ao usuário para autenticação (opcional)

  // Campos padrão do sistema
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Notification        Notification[]
  CalendarIntegration CalendarIntegration[]
  ActivityResponsible Activity[]            @relation("ActivityResponsible")
  ActivityCreatedBy   Activity[]            @relation("ActivityCreatedBy")

  // Relacionamentos com comunicação
  assignedConversations Conversation[]
  assignedChannels      CommunicationChannel[]
  messages              Message[]

  // Relacionamentos com automação e marketing
  createdMarketingCampaigns   MarketingCampaign[]
  createdMarketingAutomations MarketingAutomation[]
  createdCampaignTemplates    CampaignTemplate[]

  @@map("employees")
}

// Cliente da empresa
model Client {
  id         String @id @default(uuid())
  clientType String // Tipo de cliente (INDIVIDUAL, CORPORATE)

  // Campos para pessoa física
  fullName  String? // Nome completo (para pessoa física)
  cpf       String?   @unique // CPF único (para pessoa física)
  birthDate DateTime? // Data de nascimento (para pessoa física)
  sex       String? // Sexo (MALE, FEMALE, OTHER) - para pessoa física

  // Campos para pessoa jurídica
  companyName           String? // Razão social (para pessoa jurídica)
  tradeName             String? // Nome fantasia (para pessoa jurídica)
  cnpj                  String? @unique // CNPJ único (para pessoa jurídica)
  stateRegistration     String? // Inscrição estadual (para pessoa jurídica)
  municipalRegistration String? // Inscrição municipal (para pessoa jurídica)

  // Campos comuns
  photo            String? // URL da foto (opcional)
  email            String  @unique // Email único
  phone            String? // Telefone (opcional)
  alternativePhone String? // Telefone alternativo (opcional)

  // Relacionamento com endereço (1:1)
  address ClientAddress?

  // Relacionamento com interações (1:N)
  interactions ClientInteraction[]

  // Relacionamento com oportunidades (1:N)
  opportunities Opportunity[]

  // Campos de negócio
  internalCode String  @unique // Código interno único
  status       String // Status (ACTIVE, INACTIVE, PENDING, BLOCKED)
  notes        String? // Observações sobre o cliente

  // Campos padrão do sistema
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Activity  Activity[]

  @@map("clients")
}

// Histórico de interações com clientes
model ClientInteraction {
  id String @id @default(uuid())

  // Relacionamentos
  clientId String // ID do cliente
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  employeeId String? // ID do funcionário que realizou a interação (opcional)
  employee   Employee? @relation(fields: [employeeId], references: [id])

  // Dados da interação
  interactionType String // Tipo de interação (EMAIL, PHONE_CALL, MEETING, etc.)
  interactionDate DateTime // Data e hora da interação
  description     String // Descrição detalhada da interação
  status          String // Status da interação (SUCCESS, PENDING, etc.)
  result          String // Resultado da interação

  // Tags para categorização (armazenado como JSON)
  tags String[] // Array de tags (SALES, SUPPORT, etc.)

  // Campos adicionais
  duration     Int? // Duração em minutos (para chamadas, reuniões)
  followUpDate DateTime? // Data para follow-up
  priority     String? // Prioridade (LOW, MEDIUM, HIGH, URGENT)
  cost         Decimal?  @tenantDb.Decimal(10, 2) // Custo da interação

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_interactions")
}

// Agrupamento de funis de vendas (ex: Energia Solar, Engenharia, Pizzaria)
model PipelineGroup {
  id          String  @id @default(uuid())
  name        String // Nome do agrupamento
  description String? // Descrição do agrupamento

  // Relacionamentos
  pipelines Pipeline[] // Funis dentro deste agrupamento

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pipeline_groups")
}

// Funil de vendas
model Pipeline {
  id          String  @id @default(uuid())
  name        String // Nome do funil
  description String? // Descrição do funil

  // Relacionamentos
  groupId String // ID do agrupamento
  group   PipelineGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdBy     String // ID do usuário criador
  stages        PipelineStage[] // Estágios do funil
  opportunities Opportunity[] // Oportunidades no funil

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índice único para garantir nome único por agrupamento
  @@unique([groupId, name])
  @@map("pipelines")
}

// Estágio do funil de vendas
model PipelineStage {
  id                 String @id @default(uuid())
  name               String // Nome do estágio
  position           Int // Posição no funil (1, 2, 3, etc.)
  defaultProbability Int // Probabilidade padrão (0-100)
  color              String // Cor em hexadecimal (ex: #FF5733)

  // Relacionamentos
  pipelineId    String // ID do funil
  pipeline      Pipeline      @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  opportunities Opportunity[] // Op/*  */ortunidades neste estágio

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índice único para garantir posição única por funil
  @@unique([pipelineId, position])
  @@map("pipeline_stages")
}

// Oportunidade de vendas
model Opportunity {
  id                String    @id @default(uuid())
  name              String // Nome da oportunidade
  description       String? // Descrição da oportunidade
  value             Decimal?  @tenantDb.Decimal(10, 2) // Valor da oportunidade
  probability       Int? // Probabilidade atual (0-100)
  expectedCloseDate DateTime? // Data esperada de fechamento

  // Relacionamentos
  clientId String // ID do cliente
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  pipelineId String // ID do funil
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  stageId String // ID do estágio atual
  stage   PipelineStage @relation(fields: [stageId], references: [id])

  assignedTo       String? // ID do funcionário responsável
  assignedEmployee Employee? @relation(fields: [assignedTo], references: [id])

  // Status da oportunidade
  status       String    @default("OPEN") // OPEN, WON, LOST, CANCELLED, etc.
  closedAt     DateTime? // Data de fechamento
  closedReason String? // Motivo do fechamento

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("opportunities")
}

// Atividade/Agenda
model Activity {
  id          String    @id @default(uuid())
  type        String // TASK, APPOINTMENT, FOLLOW_UP, MEETING, CALL, EMAIL, REMINDER, DEADLINE, OTHER
  title       String // Título da atividade
  description String? // Descrição da atividade
  startDate   DateTime? // Data de início
  endDate     DateTime? // Data de término
  dueDate     DateTime? // Data limite para conclusão
  priority    String // LOW, MEDIUM, HIGH, URGENT (usando enum Priority existente)
  status      String // PENDING, IN_PROGRESS, COMPLETED, OVERDUE, CANCELLED

  // Relacionamentos
  responsibleEmployeeId String // ID do usuário responsável pela atividade
  responsibleEmployee   Employee @relation("ActivityResponsible", fields: [responsibleEmployeeId], references: [id])

  createdByEmployeeId String // ID do usuário que criou a atividade
  createdByEmployee   Employee @relation("ActivityCreatedBy", fields: [createdByEmployeeId], references: [id])

  clientId String? // ID do cliente relacionado (opcional)
  client   Client? @relation(fields: [clientId], references: [id])

  // Lembrete e notificações
  reminderDate DateTime? // Data para lembrete
  reminderSent Boolean   @default(false) // Se o lembrete já foi enviado

  // Integração com calendário externo
  externalEventId String? // ID do evento no calendário externo (ex: Google Event ID)

  // Relacionamentos com notificações
  notifications Notification[]

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activities")
}

// Notificação
model Notification {
  id      String    @id @default(uuid())
  type    String // EMAIL, PUSH, SMS, IN_APP, WHATSAPP
  message String // Mensagem da notificação
  sentAt  DateTime? // Data de envio
  isRead  Boolean   @default(false) // Se foi lida
  readAt  DateTime? // Data de leitura

  // Relacionamentos
  activityId String // ID da atividade relacionada
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  employeeId String // ID do usuário notificado
  employee   Employee @relation(fields: [employeeId], references: [id])

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Integração com calendário externo
model CalendarIntegration {
  id                 String  @id @default(uuid())
  provider           String // GOOGLE, OUTLOOK, APPLE, CALDAV, OTHER
  accessToken        String // Token de acesso OAuth
  refreshToken       String? // Token de refresh (se disponível)
  externalCalendarId String // ID do calendário no sistema externo
  isActive           Boolean @default(true) // Se a integração está ativa

  // Relacionamentos
  employeeId String // ID do usuário
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Campos padrão do sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, provider]) // Um usuário pode ter apenas uma integração por provedor
  @@map("calendar_integrations")
}

// Canal de comunicação configurado para o tenant
model CommunicationChannel {
  id          String  @id @default(uuid())
  channelType String // EMAIL, WHATSAPP, SMS, PHONE_CALL, etc.
  name        String // Nome amigável do canal
  description String? // Descrição do canal

  // Configurações específicas do canal (armazenadas como JSON)
  settings Json // Ex: API keys, tokens, configurações SMTP, etc.

  // Status do canal
  isActive Boolean @default(true)

  // Configurações de roteamento
  autoAssign         Boolean   @default(false) // Se deve atribuir automaticamente
  assignToEmployeeId String? // ID do funcionário para atribuição automática
  assignToEmployee   Employee? @relation(fields: [assignToEmployeeId], references: [id])

  // Configurações de IA
  aiEnabled  Boolean @default(false) // Se a IA está habilitada para este canal
  aiSettings Json? // Configurações específicas da IA

  // Relacionamentos
  conversations Conversation[]
  messages      Message[]

  // Campos padrão do sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("communication_channels")
}

// Conversa omnichannel que agrupa mensagens
model Conversation {
  id          String  @id @default(uuid())
  title       String // Título da conversa
  description String? // Descrição da conversa

  // Canal principal da conversa
  channelId String
  channel   CommunicationChannel @relation(fields: [channelId], references: [id])

  // Status da conversa
  status String @default("OPEN") // OPEN, CLOSED, ARCHIVED, etc.

  // Entidade relacionada (Cliente, Prospect, etc.)
  entityId   String? // ID da entidade relacionada
  entityType String? // CLIENT, PROSPECT, OPPORTUNITY, etc.

  // Funcionário responsável
  assignedEmployeeId String?
  assignedEmployee   Employee? @relation(fields: [assignedEmployeeId], references: [id])

  // Configurações de prioridade
  priority String @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT

  // Tags para categorização
  tags String[] // Array de tags

  // Metadados da conversa
  metadata Json? // Dados adicionais específicos do canal

  // Relacionamentos
  messages Message[]

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

// Mensagem individual dentro de uma conversa
model Message {
  id          String @id @default(uuid())
  content     String // Conteúdo da mensagem
  contentType String @default("TEXT") // TEXT, IMAGE, AUDIO, VIDEO, DOCUMENT, etc.

  // Canal da mensagem
  channelId String
  channel   CommunicationChannel @relation(fields: [channelId], references: [id])

  // Conversa à qual a mensagem pertence
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // Direção da mensagem
  direction String // INBOUND, OUTBOUND

  // Status da mensagem
  status String @default("PENDING") // PENDING, SENT, DELIVERED, READ, FAILED, etc.

  // Contatos (remetente e destinatário)
  senderContact        String // Email, telefone, etc.
  senderContactType    String // EMAIL, PHONE, WHATSAPP, etc.
  recipientContact     String // Email, telefone, etc.
  recipientContactType String // EMAIL, PHONE, WHATSAPP, etc.

  // Funcionário relacionado (se aplicável)
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])

  // Entidade relacionada
  entityId   String? // ID da entidade relacionada
  entityType String? // CLIENT, PROSPECT, OPPORTUNITY, etc.

  // Identificador externo (ID da mensagem no provedor)
  externalId String? // ID da mensagem no WhatsApp, email, etc.

  // Anexos
  attachments Json? // Array de anexos com URLs e metadados

  // Metadados da mensagem
  metadata Json? // Dados adicionais específicos do canal

  // Timestamps específicos
  sentAt      DateTime? // Data de envio
  deliveredAt DateTime? // Data de entrega
  readAt      DateTime? // Data de leitura

  // Processamento de IA
  aiProcessed    Boolean  @default(false) // Se foi processada pela IA
  aiResponseType String? // AUTO_REPLY, SUGGESTED_REPLY, etc.
  aiConfidence   Decimal? @tenantDb.Decimal(3, 2) // Confiança da IA (0-1)
  aiAnalysis     Json? // Análise da IA

  // Campos padrão do sistema
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CampaignRecipient CampaignRecipient[]

  @@map("messages")
}

// Template de mensagem para respostas automáticas
model MessageTemplate {
  id          String  @id @default(uuid())
  name        String // Nome do template
  description String? // Descrição do template

  // Canal para o qual o template é válido
  channelType String // EMAIL, WHATSAPP, SMS, etc.

  // Conteúdo do template
  subject String? // Assunto (para email)
  content String // Conteúdo da mensagem

  // Variáveis disponíveis no template
  variables String[] // Array de variáveis disponíveis

  // Categoria do template
  category String? // GREETING, FOLLOW_UP, CLOSING, etc.

  // Status do template
  isActive Boolean @default(true)

  // Campos padrão do sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message_templates")
}

// Regras de roteamento automático
model RoutingRule {
  id          String  @id @default(uuid())
  name        String // Nome da regra
  description String? // Descrição da regra

  // Condições da regra
  conditions Json // Condições para aplicar a regra

  // Ações da regra
  actions Json // Ações a serem executadas

  // Prioridade da regra
  priority Int @default(0) // Maior número = maior prioridade

  // Status da regra
  isActive Boolean @default(true)

  // Campos padrão do sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("routing_rules")
}

// ===== MÓDULO DE AUTOMAÇÃO E MARKETING =====

// Campanha de marketing
model MarketingCampaign {
  id          String  @id @default(uuid())
  name        String // Nome da campanha
  description String? // Descrição da campanha

  // Tipo e categoria
  campaignType String // EMAIL, SMS, WHATSAPP, MULTI_CHANNEL
  category     String? // PROMOTIONAL, EDUCATIONAL, FOLLOW_UP, WELCOME, etc.

  // Configurações da campanha
  subject    String? // Assunto (para email)
  content    String // Conteúdo da mensagem
  templateId String? // ID do template usado

  // Segmentação
  targetAudience Json? // Critérios de segmentação (JSON)
  targetLeads    String[] // IDs dos leads específicos (se aplicável)
  targetClients  String[] // IDs dos clientes específicos (se aplicável)

  // Agendamento
  scheduledAt DateTime? // Data/hora agendada para envio
  timezone    String    @default("America/Sao_Paulo") // Fuso horário

  // Status e controle
  status   String @default("DRAFT") // DRAFT, SCHEDULED, RUNNING, PAUSED, COMPLETED, CANCELLED
  priority String @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT

  // Configurações de envio
  sendLimit Int? // Limite de envios por hora/dia
  batchSize Int  @default(100) // Tamanho do lote de envio

  // Relacionamentos
  createdByEmployeeId String
  createdByEmployee   Employee @relation(fields: [createdByEmployeeId], references: [id])

  // Execuções da campanha
  campaignExecutions CampaignExecution[]

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("marketing_campaigns")
}

// Execução de campanha (histórico de disparos)
model CampaignExecution {
  id String @id @default(uuid())

  // Relacionamento com campanha
  campaignId String
  campaign   MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Dados da execução
  executionDate DateTime @default(now()) // Data/hora da execução
  status        String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED, CANCELLED

  // Estatísticas
  totalRecipients   Int @default(0) // Total de destinatários
  sentCount         Int @default(0) // Mensagens enviadas
  deliveredCount    Int @default(0) // Mensagens entregues
  openedCount       Int @default(0) // Mensagens abertas (email)
  clickedCount      Int @default(0) // Cliques em links
  repliedCount      Int @default(0) // Respostas recebidas
  bouncedCount      Int @default(0) // Mensagens retornadas
  unsubscribedCount Int @default(0) // Descadastros

  // Detalhes da execução
  startedAt    DateTime? // Início da execução
  completedAt  DateTime? // Fim da execução
  errorMessage String? // Mensagem de erro (se houver)

  // Relacionamentos
  campaignRecipients CampaignRecipient[]
  campaignReport     CampaignReport?

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_executions")
}

// Destinatário de campanha
model CampaignRecipient {
  id String @id @default(uuid())

  // Relacionamentos
  executionId String
  execution   CampaignExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Dados do destinatário
  recipientType  String // LEAD, CLIENT, CUSTOM
  recipientId    String? // ID do lead ou cliente
  recipientName  String // Nome do destinatário
  recipientEmail String? // Email do destinatário
  recipientPhone String? // Telefone do destinatário

  // Status do envio
  status String @default("PENDING") // PENDING, SENT, DELIVERED, OPENED, CLICKED, REPLIED, BOUNCED, UNSUBSCRIBED, FAILED

  // Timestamps específicos
  sentAt         DateTime? // Data de envio
  deliveredAt    DateTime? // Data de entrega
  openedAt       DateTime? // Data de abertura
  clickedAt      DateTime? // Data do clique
  repliedAt      DateTime? // Data da resposta
  bouncedAt      DateTime? // Data do bounce
  unsubscribedAt DateTime? // Data do descadastro

  // Dados adicionais
  errorMessage String? // Mensagem de erro (se houver)
  metadata     Json? // Dados adicionais específicos

  // Relacionamento com mensagem (se aplicável)
  messageId String?
  message   Message? @relation(fields: [messageId], references: [id])

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_recipients")
}

// Automação de marketing (workflows)
model MarketingAutomation {
  id          String  @id @default(uuid())
  name        String // Nome da automação
  description String? // Descrição da automação

  // Tipo de automação
  automationType String // LEAD_NURTURING, WELCOME_SERIES, FOLLOW_UP, ABANDONED_CART, etc.

  // Configurações
  triggerConditions Json // Condições que disparam a automação
  workflowSteps     Json // Passos do workflow (JSON)

  // Status
  status String @default("DRAFT") // DRAFT, ACTIVE, PAUSED, COMPLETED

  // Relacionamentos
  createdByEmployeeId String
  createdByEmployee   Employee @relation(fields: [createdByEmployeeId], references: [id])

  // Execuções da automação
  automationExecutions AutomationExecution[]

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("marketing_automations")
}

// Execução de automação
model AutomationExecution {
  id String @id @default(uuid())

  // Relacionamento com automação
  automationId String
  automation   MarketingAutomation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  // Dados da execução
  executionDate DateTime @default(now())
  status        String   @default("RUNNING") // RUNNING, COMPLETED, FAILED, CANCELLED

  // Entidade que disparou a automação
  triggerEntityType String // LEAD, CLIENT, INTERACTION, etc.
  triggerEntityId   String // ID da entidade

  // Detalhes da execução
  currentStep    Int @default(0) // Passo atual
  totalSteps     Int @default(0) // Total de passos
  completedSteps Int @default(0) // Passos completados

  // Timestamps
  startedAt   DateTime? // Início da execução
  completedAt DateTime? // Fim da execução
  nextStepAt  DateTime? // Próximo passo agendado

  // Dados adicionais
  errorMessage String? // Mensagem de erro (se houver)
  metadata     Json? // Dados adicionais específicos

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("automation_executions")
}

// Template de campanha
model CampaignTemplate {
  id          String  @id @default(uuid())
  name        String // Nome do template
  description String? // Descrição do template

  // Tipo e categoria
  templateType String // EMAIL, SMS, WHATSAPP
  category     String? // PROMOTIONAL, EDUCATIONAL, FOLLOW_UP, etc.

  // Conteúdo do template
  subject String? // Assunto (para email)
  content String // Conteúdo da mensagem

  // Variáveis disponíveis
  variables String[] // Array de variáveis disponíveis (ex: {{name}}, {{email}})

  // Configurações
  isActive Boolean @default(true)

  // Relacionamentos
  createdByEmployeeId String
  createdByEmployee   Employee @relation(fields: [createdByEmployeeId], references: [id])

  // Campos padrão do sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_templates")
}

// Relatório de campanha
model CampaignReport {
  id String @id @default(uuid())

  // Relacionamento com execução
  executionId String            @unique
  execution   CampaignExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Métricas gerais
  deliveryRate    Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de entrega (%)
  openRate        Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de abertura (%)
  clickRate       Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de clique (%)
  replyRate       Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de resposta (%)
  bounceRate      Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de bounce (%)
  unsubscribeRate Decimal @default(0) @tenantDb.Decimal(5, 2) // Taxa de descadastro (%)

  // Métricas de engajamento
  totalEngagement   Int      @default(0) // Total de engajamentos
  avgEngagementTime Decimal? @tenantDb.Decimal(8, 2) // Tempo médio de engajamento

  // Análise temporal
  peakEngagementHour Int? // Hora de maior engajamento
  peakEngagementDay  String? // Dia de maior engajamento

  // Dados demográficos (se disponível)
  demographics Json? // Análise demográfica dos destinatários

  // Campos padrão do sistema
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_reports")
}

// Histórico de interações automáticas (para LGPD)
model CommunicationLog {
  id String @id @default(uuid())

  // Tipo de ação
  actionType String // SENT, RECEIVED, PROCESSED, DELETED, etc.

  // Dados da ação
  entityType String // MESSAGE, CONVERSATION, CHANNEL
  entityId   String // ID da entidade

  // Dados sensíveis processados
  processedData Json? // Dados que foram processados

  // Motivo da ação
  reason String? // Motivo da ação (para auditoria)

  // Usuário que executou a ação
  executedBy String? // ID do usuário

  // Campos padrão do sistema
  createdAt DateTime @default(now())

  @@map("communication_logs")
}
