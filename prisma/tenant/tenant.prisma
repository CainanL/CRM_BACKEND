generator tenantClient {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/tenant-client"
}

datasource tenantDb {
  provider = "postgresql"
  url      = env("TENANT_DATABASE_URL")
}

// Solução, nome da atividade. Ex: Projeto Elétrico, energia solar, desenvolvimento de software.
model Solution {
  id          String                     @id @default(uuid())
  name        String                     @unique
  description String?
  priceRanger SolutionPriceRanger[]
  documents   SolutionCapturedDocument[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fieldSettings SolutionFieldSettings[]

  @@map("solutions")
}

// valor cobrado por determinado ranger. Ex: R$ 600 por KWp, R$ 120 por hora.
model SolutionPriceRanger {
  id                String   @id @default(uuid())
  title             String   @unique
  description       String?
  price             Decimal? @tenantDb.Decimal(10, 2)
  ranger            Decimal? @unique @tenantDb.Decimal(10, 2)
  unitOfMeasurement String?

  solutionId String
  solution   Solution @relation(fields: [solutionId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("solution_price_rangers")
}

// Parâmetros para criação do input. Ex: dataType: CPF, formatType: string, mask: 999.999.999-99, title: CPF, placeholder: CPF
model SolutionFieldSettings {
  id          String  @id @default(uuid())
  dataType    String
  formatType  String
  mask        String?
  title       String  
  placeholder String

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutionId String
  solution   Solution @relation(fields: [solutionId], references: [id])

  SolutionFieldValue SolutionFieldValue[]


  @@map("solution_field_settings")
}

// Valor do input. Ex: CPF, valor = 000.000.000-00
model SolutionFieldValue {
  id    String  @id @default(uuid())
  value String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documentId String
  document   SolutionCapturedDocument @relation(fields: [documentId], references: [id])

  settingsId String
  settings SolutionFieldSettings @relation(fields: [settingsId], references: [id])

  @@map("solution_field_values")
}

// Contem o agrupamento de inputs de cada solution juntando os dados de input e vinculando a informação ao lead que está sendo criado aqui.
model SolutionCapturedDocument {
  id String @id @default(uuid())

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fielValues SolutionFieldValue[]

  solutionId String
  solution   Solution @relation(fields: [solutionId], references: [id])

  @@map("solution_captured_documents")
}
